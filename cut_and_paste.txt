#Logistics
##===

# Load libraries
library(vioplot) # violin plots
library(Seurat) # Data Basics, QC, Spatial
#library(scde) # Differential Expression
library(monocle) # Pseudotemporal analysis


#Load Code
##===

# Source code Helper functions
source(file.path("src", "Modules.R"))


#Data: Ready, Get Set, Load!
#===

# Load tab delimited file
data.set = read.delim(file.path("data", "GSE29087_L139_updated.txt"))


#What are Our Genes?
#===

# Gene names (row names)
rownames(data.set)


#What are Our Cells?
#===

# Column names
# Sample / Cell names
colnames( data.set )


#How Many Expressed Genes (Complexity)?
#===

# Plot genes per cell
# How many genes express
genes.per.cell <- apply( data.set, 2, function(x) sum( x>0 ))


#How Many Expressed Genes (Complexity)?
#===
 
# Each cell is a dot
cell.outlier = plot.cell.complexity( genes.per.cell )


#Filter Cells: Removing the Outlier Cells
#===

# Which outliers?
cell.outlier
 
# Remove outlier cells
data.set = data.set[, -1 * cell.outlier]
ncol(data.set)


#Genes Have Different Distributions
#===
 
# Gene distribution through cells
# By the gene's average expression (color)
plot.quantiles( data.set ) 


#Filter Genes: Using Prevalence
#===

# Remove low expressing genes
# Remove genes that do not have atleast 10 counts in 10 samples.
data.cleaned <- func_filter_by_occurence( data.set, 10, 10 )


#Normalizing for Cell Sequencing Depth
#===
 
# Counts to CPX
data.cleaned.norm <- func_cpx(data.cleaned)


#Plotting Sequencing Saturation of a Cell
#===
 
func_plot_saturation_curve(data.cleaned[, 1], 1000)


#Loading Data into Seurat
#===
 
# Read data in to Seurat
nbt = read.into.seurat(file.path("data", "HiSeq301_RSEM_linear_values.txt"), 
    sep = "\t", header = TRUE, row.names = 1)

# Sets up object, filters
nbt = setup(nbt, project = "NBT", min.cells = 3, names.field = 2, names.delim = "_", 
    min.genes = 1000, is.expr = 1)


#Quality Control in scData
#===

# Plot gene expression throughout cell groups
vlnPlot(nbt, c("DPPA4"))


#Viewing Genes vs Genes
#===

# Plot a gene vs a gene
cellPlot(nbt, nbt@cell.names[1], nbt@cell.names[2], do.ident = FALSE)


#Viewing Cells vs Cells
#===
 
# Plot a cell vs a cell
cellPlot(nbt, nbt@cell.names[3], nbt@cell.names[4], do.ident = FALSE)


#PCA using Seurat
#===
 
# Prep data for PCA
nbt = prep.pca.seurat(y.cutoff = 2, x.low.cutoff = 2)

# Plot PCA
pca.plot(nbt, 1, 2, pt.size = 3)


#Genes Contributing to Components
#===

# List driving PC1
print.pca(nbt, 1)


#Genes Contributing to Components
#===
 
# View genes driving PC1
viz.pca(nbt, 1:2)


#tSNE using Seurat
#===
 
# Run the t-SNE alogirthm
nbt = run_tsne(nbt, dims.use = 1:11, max_iter = 2000)

# Plot results
tsne.plot(nbt, pt.size = 3)


#QC the Clusters!
#===
 
# Paint PCA by complexity
pca.plot(nbt, 1, 2, pt.size = 3, group.by = "nGene")

# Paint the t-SNE by complexity
tsne.plot(nbt, pt.size = 3, group.by = "nGene")


#Defining Clusters from PCA or TSNE
#===
 
# Perform clustering
nbt = DBclust_dimension(nbt, 1, 2, reduction.use = "tsne", G.use = 8, set.ident = TRUE)

# Identify groups
nbt = buildClusterTree(nbt, do.reorder = TRUE, reorder.numeric = TRUE, pcs.use = 1:11, 
    do.plot = FALSE)

# Plot
tsne.plot(nbt, do.label = TRUE, label.pt.size = 0.5)


#RaceID: Detecting Rare Cell Populations
#===
 
# Load code
source(file.path("src", "RaceID_class.R"))

# Load tutorial data
race.in <- read.csv(file.path("data", "transcript_counts_intestine.xls"), sep = "\t", 
    header = TRUE)

# Set up data
rownames(race.in) <- race.in$GENEID
race.in <- race.in[grep("ERCC", rownames(race.in), invert = TRUE), -1]
race.data <- SCseq(race.in)


#RaceID: Detecting Rare Cell Populations
#===
 
# Filter data
race.data <- filterdata(race.data, mintotal = 3000, minexpr = 5, minnumber = 1, 
    maxexpr = 500, downsample = FALSE, dsn = 1, rseed = 17000)

# Cluster data
race.data <- clustexp(race.data, metric = "pearson", cln = 0, do.gap = TRUE, 
    clustnr = 20, B.gap = 50, SE.method = "Tibs2001SEmax", SE.factor = 0.25, 
    bootnr = 50, rseed = 17000)


#RaceID: Detecting Rare Cell Populations
#===
 
# Check clusters
plotgap(race.data)


#RaceID: Detecting Rare Cell Populations
#===
 
# Find outliers
race.data <- findoutliers(race.data, outminc = 5, outlg = 2, probthr = 0.001, 
    thr = 2^-(1:40), outdistquant = 0.75)

# Project with t-SNE
race.data <- comptsne(race.data, rseed = 15555)


#RaceID: Detecting Rare Cell Populations
#===
 
# Plot t-SNE
plottsne(race.data, final = FALSE)


#RaceID: Detecting Rare Cell Populations
#===
 
plottsne(race.data, final = TRUE)


#RaceID: Detecting Rare Cell Populations
#===
 
# Interesting genes
target.genes <- c("Apoa1__chr9", "Apoa1bp__chr3", "Apoa2__chr1", "Apoa4__chr9", 
    "Apoa5__chr9")

# Plot expresssion of interesting genes
plotexptsne(race.data, target.genes)


#RaceID: Detecting Rare Cell Populations
#===
 
# Plot t-SNE labeling groups with symbols
plotsymbolstsne(race.data, type = sub("\\_\\d+$", "", names(race.data@ndata)))


#Read In and Format
#===

# Do not run (For later) monocle.data <- make_cell_data_set(
# expression_file='monocle_exprs.txt',
# cell_phenotype_file='monocle_cell_meta.txt',
# gene_metadata_file='monocle_gene_meta.txt' )

# Get data for today
monocle.data <- get_monocle_presentation_data()


#Filter Genes
#===
 
# Require a minimun of 0.1 expression
monocle.data <- detectGenes(monocle.data, min_expr = 0.1)

# Require atleast 50 cells to have the minimum 0.1 expression Get name of
# genes pass these filters
monocle.expr.genes <- row.names(subset(fData(monocle.data), num_cells_expressed >= 50))

 
#Confirm the Log-Normal Assumption
#===
 
# Check data
plot_log_normal_monocle(monocle.data)


#Ordering by Expression: Study View
#===

# Marker genes of biological interest
marker.genes <- get_monocle_presentation_marker_genes()
# Select from those marker genes those important to the study
ordering.genes <- select_ordering_genes(monocle.data, monocle.expr.genes, marker.genes, 
    "expression~Media", 0.01)

# Order the cells by expression
monocle.data <- order_cells_wrapper(monocle.data, ordering.genes, use_irlba = FALSE, 
    num_paths = 2, reverse = TRUE)
# Plot all cells in study with ordering
plot_spanning_tree(monocle.data)


#Ordering by Expression: Gene View
#===
 
# Gene genes of interest in states 1 and 2
monocle.data.diff.states <- monocle.data[monocle.expr.genes, pData(monocle.data)$State != 
    3]

# Look at a subset of genes
subset.for.plot <- subset_to_genes(monocle.data.diff.states, c("CDK1", "MEF2C", 
    "MYH3"))

# Plot in pseudotime
plot_genes_in_pseudotime(subset.for.plot, color_by = "Hours")


#Genes Which Follow an Assumed Temporal Pattern
#===
 
# Get genes of interest
subset.pseudo <- subset_to_genes(monocle.data, c("MYH3", "MEF2C", "CCNB2", "TNNT1"))

# Reduce the genes to just state 1 and 2
subset.pseudo <- subset.pseudo[, pData(subset.pseudo)$State != 3]

# Perform differential expression test
subset.pseudo.diff <- differentialGeneTest(subset.pseudo, fullModelFormulaStr = "expression~sm.ns(Pseudotime)")

# Color plot by time
plot_genes_in_pseudotime(subset.pseudo, color_by = "Hours")


#Notes: to Make a PDF
#===

# pdf( 'data/my_file.pdf', useDingbats = FALSE ) # Start pdf plot( 1:10,
# log(1:10 ) ) # plot in to the pdf file plot( seq(0,.9,.1), sin(0:9) ) #
# another plot for the pdf file dev.off() # Close pdf file ( very important
# )
